substr(9,4)
substr(series, 9, 4
)
substr(series, 9, 13)
substring(series, 10, 4)
subst(series, 10, 14)
substr(series, 10, 14)
substr(series, 10, 13)
seriesYear <- substr(series, nchar(series) - 4, nchar(series) - 1)
substr(series, 1, nchar(series) - 6)
substr(series, 1, nchar(series) - 7)
seriesTitle <- substr(series, nchar(series) - 7)
seriesTitle <- substr(series, 1, nchar(series) - 7)
seriesYear <- substr(series, nchar(series) - 4, nchar(series) - 1)
query <- paste("exec Media.BrowseEpisodes @seriesTitle = '", seriesTitle,
"', @seriesYear = ", seriesYear, sep = "")
query
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
########
networkData <- GetNetworkData()
View(networkData)
networkData[2:3]
runApp()
dfData <- networkData[2:3]
dfData
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(output)
input$referenceNetworkName
nchar(input$referenceNetworkName)
runApp()
input$outReferenceNetworkBrowse_rows_selected
if (input$outReferenceNetworkBrowse_rows_selected > 0) TRUE else FALSE
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?load
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?get
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
########
updateData()
runApp()
runApp()
runApp()
input$statusData
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
values$statusData
runApp()
runApp()
runApp()
runApp()
runApp()
rs$message
runApp()
runApp()
runApp()
runApp()
GetStatusData()
runApp()
statusData
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
## above is what assigns the error to con, in message
if (typeof(con) == "list")
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error connecting to database:",
con$message)))
query <- "exec Reference.BrowseStatusCodes"
## try executing command in query, with connection in con
## if the query fails, return a DT::datatable with the error message
rs <- tryCatch(dbSendQuery(con, query),
error = function(err) { return(err) })
## above is what assigns the error to rs, in message
if (typeof(rs) == "list")
{
dbDisconnect(con)
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error executing command:",
rs$message)))
}
dfData <- dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
return(dfData)
dfData
statusData <- dfData
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
## above is what assigns the error to con, in message
if (typeof(con) == "list")
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error connecting to database:",
con$message)))
query <- "exec Reference.BrowseStatusCodes"
## try executing command in query, with connection in con
## if the query fails, return a DT::datatable with the error message
rs <- tryCatch(dbSendQuery(con, query),
error = function(err) { return(err) })
## above is what assigns the error to rs, in message
if (typeof(rs) == "list")
{
dbDisconnect(con)
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error executing command:",
rs$message)))
}
dfData <- dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
return(dfData)
dfData <- statusData
dfData <- statusData[2:3]
runApp()
runApp()
runApp()
runApp()
Sys.Date
Sys.Date()
runApp()
runApp()
runApp()
runApp()
test <- "this isn't great"
replace(test, "'", "''")
test
test <- replace(test, "'", "''")
test
test <- "this isn't great"
library(Stringr)
library(stringr)
str_replace_all(test, "'", "''")
runApp()
runApp()
runApp()
runApp()
runApp()
movieUid
input$mediaMovieTitle
input$mediaMovieReleaseDate
input$mediaMovieNetwork
input$mediaMovieSynopsis
message
mediaUid = ""
nchar(mediaUid)
runApp()
query
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
format(Sys.Date(), "%Y")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
## above is what assigns the error to con, in message
if (typeof(con) == "list")
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error connecting to database:",
con$message)))
query <- "exec Reference.BrowseNetworks"
## try executing command in query, with connection in con
## if the query fails, return a DT::datatable with the error message
rs <- tryCatch(dbSendQuery(con, query),
error = function(err) { return(err) })
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
con$message
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
con$message
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
runApp()
shiny::runApp()
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
## above is what assigns the error to con, in message
if (typeof(con) == "list")
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error connecting to database:",
con$message)))
query <- "exec Media.BrowseSeries"
## try executing command in query, with connection in con
## if the query fails, return a DT::datatable with the error message
rs <- tryCatch(dbSendQuery(con, query),
error = function(err) { return(err) })
## above is what assigns the error to rs, in message
if (typeof(rs) == "list")
{
dbDisconnect(con)
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error executing command:",
rs$message)))
}
dfData <- dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
dfData
dfData$SeriesUid[dfData$SeriesTitle == 'Testing' && dfData$SeriesYear == 2021]
dfData$SeriesUid[SeriesTitle == "Testing" && SeriesYear == 2021]
seriesUid <- ""
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
## above is what assigns the error to con, in message
if (typeof(con) == "list")
## function accepts a character string and returns a DT::datatable
return(p(paste("Error connecting to database:", con$message)))
query <- "exec Media.ListSeries"
## try executing command in query, with connection in con
## if the query fails, return a DT::datatable with the error message
rs <- tryCatch(dbSendQuery(con, query),
error = function(err) { return(err) })
## above is what assigns the error to rs, in message
if (typeof(rs) == "list")
{
dbDisconnect(con)
## function accepts a character string and returns a DT::datatable
return(p(paste("Error executing command:", rs$message)))
}
dfData <- dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
View(dfData)
choices <- list("")
selectedIndex <- 1
if (length(dfData$SeriesTitle) > 0) {
for (i in 1:length(dfData$SeriesTitle)) {
choices <- c(choices, list(dfData$SeriesTitle[i]))
if (dfData$SeriesUid[i] == seriesUid)
selectedIndex <- i + 1
}
}
selectedItem <- choices[selectedIndex]
View(selectedItem)
selectInput(
ns("mediaEpisodeSeries"),
"Series",
choices = choices,
selected = selectedItem
)
selectInput(
"mediaEpisodeSeries",
"Series",
choices = choices,
selected = selectedItem
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
message <- paste("Series Added:", "Testing 6")
substring(message, 1, 13)
runApp()
runApp()
debugSource('C:/SQL/R Testing/RTestingShiny/MediaSeriesModule.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
## above is what assigns the error to con, in message
if (typeof(con) == "list")
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error connecting to database:",
con$message)))
query <- "exec Media.BrowseSeries"
## try executing command in query, with connection in con
## if the query fails, return a DT::datatable with the error message
rs <- tryCatch(dbSendQuery(con, query),
error = function(err) { return(err) })
## above is what assigns the error to rs, in message
if (typeof(rs) == "list")
{
dbDisconnect(con)
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error executing command:",
rs$message)))
}
dfData <- dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
dfData$SeriesUid[dfData$seriesTitle == "Testing 15" && dfData$SeriesYear == "2021"]
dfData$SeriesUid[dfData$seriesTitle == "Testing 15" && dfData$SeriesYear == 2021]
dfData$SeriesUid[dfData$SeriesTitle == "Testing 15" && dfData$SeriesYear == 2021]
View(dfData)
dfData$SeriesUid[dfData$SeriesTitle == "Testing 15"]
dfData$SeriesUid[dfData$SeriesTitle == "Testing 15" & dfData$SeriesYear == 2021]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.Date()
as.Date("")
runApp()
runApp()
runApp()
runApp()
runApp()
series <- "Testing 11 (2021)"
seriesTitle <- substr(series, 1, nchar(series) - 7)
seriesYear <- substr(series, nchar(series) - 4, nchar(series) - 1)
## try connecting to database; if the connection fails, return a
## DT::datatable with the error message
con <- tryCatch(GetDatabaseConnection(),
error = function(err) { return(err) })
## above is what assigns the error to con, in message
if (typeof(con) == "list")
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error connecting to database:",
con$message)))
query <- paste("exec Media.BrowseEpisodes @seriesTitle = '", seriesTitle,
"', @seriesYear = ", seriesYear, sep = "")
## try executing command in query, with connection in con
## if the query fails, return a DT::datatable with the error message
rs <- tryCatch(dbSendQuery(con, query),
error = function(err) { return(err) })
## above is what assigns the error to rs, in message
if (typeof(rs) == "list")
{
dbDisconnect(con)
## function accepts a character string and returns a DT::datatable
return(ReturnErrorDataTable(paste("Error executing command:",
rs$message)))
}
dfData <- dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
View(dfData)
as.Date(NA)
runApp()
runApp()
shiny::runApp()
